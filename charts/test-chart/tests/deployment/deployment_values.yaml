global:
  render_key: rendered

deployments:
  api:
    name: api
    namespace: test-namespace
    replicas: 2
    revisionHistoryLimit: 5
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    initContainers:
      init-db:
        name: init-db
        image:
          registry: docker.io
          repository: busybox
          tag: 1.0.0
        command: 
          - /bin/sh
          - -c
          - "echo 'db initialized'"
        envFrom:
          - configMapRef:
              name: init-db-config
          - secretRef:
              name: init-db-secret
          - configMapRef:
              name: init-db-config-{{ global.render_key }}
        volumeMounts:
          - name: config-volume-{{ global.render_key }}
            mountPath: /config-{{ global.render_key }}
    imagePullSecrets:
      - name: my-secret
    containers:
      api-container: 
        name: api-container
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
        image:
          registry: docker.io
          repository: busybox
          tag: 1.0.0
        imagePullPolicy: Always
        ports:
          - containerPort: 8080
        env:
          - name: DB_HOST
            value: localhost
          - name: key
            valueFrom:
              configMapKeyRef:
                name: app-config
                key: keyRef
          - name: key2
            valueFrom:
              secretKeyRef:
                name: app-secret
                key: key2Ref
        envFrom:
          - configMapRef:
              name: app-config
          - secretRef:
              name: app-secret
          - configMapRef:
              name: app-config-{{ global.render_key }}
        volumeMounts:
          - name: config-volume-{{ global.render_key }}
            mountPath: /config-{{ global.render_key }}
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
    volumes:
      - name: config-volume
        configMap:
          name: app-config
          items:
            - key: config.yaml
              path: config.yaml
      - name: projected-volume-{{ global.render_key }}
        projected:
          sources:
          - secret:
              name: mysecret-{{ global.render_key }}
              items:
                - key: username-{{ global.render_key }}
                  path: my-group/my-username-{{ global.render_key }}
    securityContext:
      runAsNonRoot: true
    serviceAccountName: api-sa
    nodeSelector:
      disktype: ssd
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/e2e-az-name
                  operator: In
                  values:
                    - e2e-az1
                    - e2e-az2
